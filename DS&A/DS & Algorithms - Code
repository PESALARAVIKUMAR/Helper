
Binary Search Tree:
Search Algorithm:
	Search (ROOT, ITEM):
		IF ROOT -> DATA = ITEM OR ROOT = NULL
			Return ROOT
		ELSE IF ROOT < ROOT -> DATA
			Return search(ROOT -> LEFT, ITEM)
		ELSE
			Return search(ROOT -> RIGHT,ITEM)
Insertion Algorithm:
	Insert (TREE, ITEM):
		IF TREE = NULL
			Allocate memory for TREE
			SET TREE -> DATA = ITEM
			SET TREE -> LEFT = TREE -> RIGHT = NULL
		ELSE IF ITEM < TREE -> DATA
			Insert(TREE -> LEFT, ITEM)
		ELSE
			Insert(TREE -> RIGHT, ITEM)
Deletion Algorithm:
	Delete (TREE, ITEM):
		IF TREE = NULL
			Write "item not found in the tree"
		ELSE IF ITEM < TREE -> DATA
			Delete(TREE->LEFT, ITEM)
		ELSE IF ITEM > TREE -> DATA
			Delete(TREE -> RIGHT, ITEM)
		ELSE IF TREE -> LEFT AND TREE -> RIGHT
			SET TEMP = findLargestNode(TREE -> LEFT)
			SET TREE -> DATA = TEMP -> DATA
			Delete(TREE -> LEFT, TEMP -> DATA)
		ELSE
			SET TEMP = TREE
			
		IF TREE -> LEFT = NULL AND TREE -> RIGHT = NULL
			SET TREE = NULL
		ELSE IF TREE -> LEFT != NULL
			SET TREE = TREE -> LEFT
		ELSE
			SET TREE = TREE -> RIGHT
		FREE TEMP
--------------------------------------------------------------------------------------------------------------------------------
BFS - Breadth First Search - Time Complexity: O(V+E)

import java.io.*;
import java.util.*;
 
class Graph
{
    private int V;   // No. of vertices
    private LinkedList<Integer> adj[]; //Adjacency Lists

    Graph(int v)
    {
        V = v;
        adj = new LinkedList[v];
        for (int i=0; i<v; ++i)
            adj[i] = new LinkedList();
    }
 
    void addEdge(int v,int w)
    {
        adj[v].add(w);
    }
 
    // prints BFS traversal from a given source s
    void BFS(int s)
    {
        // Mark all the vertices as not visited(By default
        // set as false)
        boolean visited[] = new boolean[V];
 
        // Create a queue for BFS
        LinkedList<Integer> queue = new LinkedList<Integer>();
 
        // Mark the current node as visited and enqueue it
        visited[s]=true;
        queue.add(s);
 
        while (queue.size() != 0)
        {
            // Dequeue a vertex from queue and print it
            s = queue.poll();
            System.out.print(s+" ");
 
            // Get all adjacent vertices of the dequeued vertex s
            // If a adjacent has not been visited, then mark it
            // visited and enqueue it
            Iterator<Integer> i = adj[s].listIterator();
            while (i.hasNext())
            {
                int n = i.next();
                if (!visited[n])
                {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }
 
    public static void main(String args[])
    {
        Graph g = new Graph(4);
 
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 2);
        g.addEdge(2, 0);
        g.addEdge(2, 3);
        g.addEdge(3, 3);
 
        System.out.println("Following is Breadth First Traversal "+
                           "(starting from vertex 2)");
 
        g.BFS(2);
    }
}


DFS - Depth First search - Time complexity: O(V + E), Space Complexity: O(V)

import java.io.*;
import java.util.*;
 
class Graph {
    private int V;
    private LinkedList<Integer> adj[];
 
    Graph(int v)
    {
        V = v;
        adj = new LinkedList[v];
        for (int i = 0; i < v; ++i)
            adj[i] = new LinkedList();
    }
 
    void addEdge(int v, int w)
    {
        adj[v].add(w); // Add w to v's list.
    }
 
    void DFSUtil(int v, boolean visited[])
    {
        // Mark the current node as visited and print it
        visited[v] = true;
        System.out.print(v + " ");
 
        // Recur for all the vertices adjacent to this
        // vertex
        Iterator<Integer> i = adj[v].listIterator();
        while (i.hasNext())
        {
            int n = i.next();
            if (!visited[n])
                DFSUtil(n, visited);
        }
    }
 
    // The function to do DFS traversal.
    // It uses recursive
    // DFSUtil()
    void DFS(int v)
    {
        // Mark all the vertices as
        // not visited(set as
        // false by default in java)
        boolean visited[] = new boolean[V];
 
        // Call the recursive helper
        // function to print DFS
        // traversal
        DFSUtil(v, visited);
    }
 
    // Driver Code
    public static void main(String args[])
    {
        Graph g = new Graph(4);
 
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 2);
        g.addEdge(2, 0);
        g.addEdge(2, 3);
        g.addEdge(3, 3);
 
        System.out.println(
            "Following is Depth First Traversal "
            + "(starting from vertex 2)");
 
        g.DFS(2);
    }
}